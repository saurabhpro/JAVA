package com.saurabh.junit5dynamictests;

import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.junit.jupiter.api.function.Executable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TranslatorEngineJunit5DynamicTest {


    private TranslatorEngine translatorEngine = new TranslatorEngine();

    @Test
    void translateDynamicTests() {
        List<String> inPhrases = new ArrayList<>(Arrays.asList("Hello", "Yes", "No"));
        List<String> outPhrases = new ArrayList<>(Arrays.asList("Bonjour", "Oui", "Non"));
        Collection<DynamicTest> dynamicTests = new ArrayList<>();

        for (int i = 0; i < inPhrases.size(); i++) {
            String phr = inPhrases.get(i);
            String outPhr = outPhrases.get(i);
            // create an test execution
            Executable exec = () -> assertEquals(outPhr, translatorEngine.translate(phr));
            // create a test display name
            String testName = " Test tranlate " + phr;
            // create dynamic test
            DynamicTest dTest = DynamicTest.dynamicTest(testName, exec);
            // add the dynamic test to collection
            dynamicTests.add(dTest);
        }
    }

	/*
	 * Dynamic tests can be generated by a factory method annotated with @TestFactory, which is a new annotation of JUnit 5.
	 @TestFactory method must return a Stream, Collection, Iterable, or Iterator of DynamicTest instances.
	 @TestFactory methods must not be private or static, and may optionally declare parameters to be resolved by ParameterResolvers.
	 */

    @TestFactory
    Collection<DynamicTest> translateDynamicTestsWithIterator() {
        List<String> inPhrases = new ArrayList<>(Arrays.asList("Hello", "Yes", "No", "Goodbye", "Good night", "Thank you"));
        List<String> outPhrases = new ArrayList<>(Arrays.asList("Bonjour", "Oui", "Non", "Au revoir", "Bonne nuit", "Merci"));

        Collection<DynamicTest> dynamicTests = new ArrayList<>();

        for (int i = 0; i < inPhrases.size(); i++) {
            String phr = inPhrases.get(i);
            String outPhr = outPhrases.get(i);
            // create an test execution
            Executable exec = () -> assertEquals(outPhr, translatorEngine.translate(phr));
            // create a test display name
            String testName = "Test translate " + phr;
            // create dynamic test
            DynamicTest dTest = DynamicTest.dynamicTest(testName, exec);
            // add the dynamic test to collection
            dynamicTests.add(dTest);
        }
        return dynamicTests;
    }
}
