Transaction is set of operations that must be processed as a single unit.
It means you have wrapped some work (statements, method calls, whole methods, access to database etc.)
into a single unit in such a way that either everything succeeds or everything reverts to previous state.

In other word you either commit or rollback the atomic unit, either it all work or we just forget
everything happened.

CHARACTERISTICS OF array.references.exceptions.try_with_resources.A GOOD AND SAFE DATABASE CONNECTION

The characteristics of a good and safe transaction is given by the acronym ACID

array.references.exceptions.try_with_resources.A- atomicity
Either it all work or it all fails. array.references.exceptions.try_with_resources.A transaction is not Atomic if it is possible for some of it to commit,
while the other parts do not.

array.references.exceptions.try_with_resources.C- consistency
it means the database must not be left in a state that violate the integrity of database,
regardless of the success and failure of any transaction.
Suppose you take item out of inventory without actually submitting an order or
like a bank account must be having the minimum balance of Rs. 500

I- isolated
let's say you have two different transactions running and hitting the same database.
You don't want the effect of one transaction to corrupt the state of another transaction.
In other words, the transactions should be protected(isolated) from one another.
Isolation is similar to thread synchronization

D- durable
the changes made by the transaction must become permanent, even if the server goes down,
it must come back and finish what is started to commit.
